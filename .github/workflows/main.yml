on:
  push:
    branches: [main]
  pull_request:
    branches: [ main ]

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Atualização do código
        uses: actions/checkout@v2

      - name: Definindo a versão da JDK 
        uses: actions/setup-java@v3
        with:
          distribution: 'oracle' 
          java-version: '17'

      - name: Build com Maven
        run: mvn -f ./pom.xml clean install -Dmaven.test.skip=true

      - name: Gerar artefato Github com o .jar gerado
        uses: actions/upload-artifact@v4 
        with:
          name: aplicacao 
          path: ./target/*.jar

      - name: Gerar artefato Github com os arquivos .sh
        uses: actions/upload-artifact@v4        
        with:
          name: scripts  # nome do arquivo ou conjunto de arquivos (veja ele depois em 'Recuperar scripts')
          path: .github/scripts/*
        
  deploy:
    needs: build
    runs-on: ubuntu-latest
    
    steps:
      - uses: actions/checkout@v2
              
      - name: Recuperar jars
        uses: actions/download-artifact@v4  # essa action promove o download de um ou mais arquivos de uma pasta temporária do github actions
        with:
          name: aplicacao # nome do arquivo ou conjunto de arquivos que queremos recuperar
          path: ./ # diretório da VM de execução do workflow onde os arquivos recuperados ficarão

      - name: Recuperar scripts
        uses: actions/download-artifact@v4
        with:
          name: scripts
          path: ./scripts/     
  
      - name: Enviar o JAR p/ a EC2
        uses: appleboy/scp-action@master # esta action abstrai o uso do comando scp, permitindo o envio de arquivos via ssh
        with:
          host: ${{ secrets.DEPLOY_HOST }} # ip da ec2 pública
          username: ubuntu
          key: ${{ secrets.DEPLOY_KEY }} # conteúdo pem que permite acesso à ec2 pública
          source: "./*.jar" # enviando todos os .jar (estão lá graças ao step 'Recuperar jars')
          target: "/home/ubuntu/deploy-api/" # diretório de destino na ec2 pública
  
      - name: Enviar os Scripts p/ a EC2
        uses: appleboy/scp-action@master
        with:
          host: ${{ secrets.DEPLOY_HOST }}
          username: ubuntu
          key: ${{ secrets.DEPLOY_KEY }}
          source: "./scripts/*"  # enviando todos os .jar (estão lá graças ao step 'Recuperar scripts')
          target: "/home/ubuntu/deploy-api/" # diretório de destino na ec2 pública

      - name: Criar arquivo .pem a partir da variável DEPLOY_KEY e fazer o chmod 400 nele
        id: geracao-arquivo-pem # o id é opcional, mas é bom para fins de log
        run: |
          echo "${{ secrets.DEPLOY_KEY }}" >> $HOME/deploy_key.pem
          chmod 400 $HOME/deploy_key.pem
        # aqui geramos um arquivo .pem a partir de seu conteúdo (que é apenas um arquivo texto) 
  
      - name: Conectar via SSH à EC2 privada para implantar e reiniciar a API
        run: |
          ssh -T -o StrictHostKeyChecking=no -i $HOME/deploy_key.pem ubuntu@${{ secrets.DEPLOY_HOST }} << 'EOF'
            echo "${{ secrets.DEPLOY_KEY }}" >> $HOME/deploy_key.pem
            chmod 600 $HOME/deploy_key.pem
            scp -i $HOME/deploy_key.pem deploy-api/backend-1.0.0.jar ubuntu@${{ secrets.IP_PRIVADO_EC2 }}:/home/ubuntu/deploy-api/
            scp -i $HOME/deploy_key.pem deploy-api/scripts/* ubuntu@${{ secrets.IP_PRIVADO_EC2 }}:/home/ubuntu/deploy-api/
            ssh -i $HOME/deploy_key.pem ubuntu@${{ secrets.IP_PRIVADO_EC2 }} "cd /home/ubuntu/deploy-api/ && sudo docker-compose down && sudo docker-compose -f docker-compose.yml up -d --build"
          EOF
